[{"categories":["UML"],"content":"类 1. 类图分为三层 2. 第一层为类的名称,如果是抽象类,则用斜体表示 3. 第二次是类的特性,通常就是字段和数学 4. 第三次是类的操作,通常为方法或行为 5. 注意前面的符号 \u0026#39;+\u0026#39; 表示public \u0026#39;-\u0026#39;表示private \u0026#39;#\u0026#39;表示protected 接口 1. 于类图的区别在于顶端有 \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; 显示,第一行为接口名称 2. 第二行为接口方法 3. 接口还有另一种表示方法,俗称棒棒糖表示法 继承 1. 继承关系用空心三角形+实线来表示 2. 继承接口实现用空心三角形+虚线来实现 关联 1. 关联关系用实线箭头来表示 聚合 1. 聚合是一种弱的\u0026#39;拥有关系\u0026#39;,体现是A对象可以包含B对象,但B对象不是A对象的一部分 2. 聚合关系用空心的菱形 + 实现箭头来表示 合成 1. 合成是一种强的\u0026#39;拥有关系\u0026#39;,体现了严格的部分和整体的关系,部分和整体生命周期是一样的 2. 合成关系用实心菱形 + 实现箭头来表示 3. 合成关系两端还有数字,这被称之为基数,表明这一的类可以有几个实例 依赖 1. 依赖关系用虚线箭头来表示 编程是一门技术,更加是一门艺术 ","date":"2021-08-23","permalink":"https://vchy1997.github.io/zh-cn/posts/shortcodes/uml/uml/","series":null,"tags":["UML"],"title":"UML类图"},{"categories":["git"],"content":"git 提交 1.将当前已添加暂存区内容提交\ngit commit -m \u0026#39;\u0026lt;提交说明\u0026gt;\u0026#39; 2.将当前修改内容添加并提交\ngit commit -am \u0026#39;\u0026lt;提交说明\u0026gt;\u0026#39; 3.将当前修改内容追加到上一次提交记录中\ngit commit -a --amond -m \u0026#39;\u0026lt;提交说明\u0026gt;\u0026#39; git 分支  创建分支  git branch \u0026lt;分支名称\u0026gt; 切换分支  git checkout \u0026lt;分支名称\u0026gt; 切换分支,不存在此分支时进行创建分支并切换  git checkout -b \u0026lt;分支名称\u0026gt; 合并分支(将其他分支合并到当前分支)  Merge合并会生成一条commit记录,并且分支状态为并行状态\rgit merge \u0026lt;分支名称\u0026gt; 合并分支(将当前分支合并到指定分支)  rebase 合并不会生成多余的commit记录,并且分支状态为线性状态\rgit rebase \u0026lt;分支名称\u0026gt;\r","date":"2021-08-10","permalink":"https://vchy1997.github.io/zh-cn/posts/shortcodes/git/git/","series":null,"tags":["git"],"title":"git命令"},{"categories":["dotnet/runtime"],"content":"关于 dotnet/runtime 项目结构\n","date":"2021-07-19","permalink":"https://vchy1997.github.io/zh-cn/posts/shortcodes/runtime/","series":null,"tags":["project"],"title":"runtime project"}]